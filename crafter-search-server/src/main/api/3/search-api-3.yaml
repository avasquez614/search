openapi: 3.0.0
servers:
- url: 'http://localhost:8080/crafter-search/api/3/search'
info:
  description: |-
    Crafter Search API v3
    https://docs.craftercms.org/en/3.1/developers/projects/search/index.html
  version: '3'
  title: Crafter Search
  termsOfService: ''
  contact:
    email: info@craftercms.org
  license:
    name: GPL 3.0
    url: 'https://www.gnu.org/licenses/gpl-3.0.en.html'
externalDocs:
  description: Crafter CMS - Crafter Search
  url: 'https://docs.craftercms.org/en/3.1/developers/projects/search/index.html'
tags:
- name: search
  description: Search operations
- name: update
  description: Update operations
- name: delete
  description: Delete operations

paths:
  /search:
    post:
      tags:
      - search
      summary: Perform a search using the Crafter Search API
      operationId: search
      requestBody:
        description: Search request
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/SearchRequest"
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SearchResponse"
        '500':
          $ref: "#/components/responses/UnknownError"
        '503':
          $ref: "#/components/responses/SaerchServerError"
  /search/native:
    post:
      tags:
      - search
      summary: Perform a search using the search provider specific API
      operationId: nativeSearch
      parameters:
      - $ref: "#/components/parameters/indexId"
      requestBody:
        description: Search parameters
        required: true
        content:
          application/json:
            schema:
              type: object
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
        '500':
          $ref: "#/components/responses/UnknownError"
        '503':
          $ref: "#/components/responses/SaerchServerError"
  /delete:
    post:
      tags:
      - delete
      summary: Perform a delete for a single document
      operationId: delete
      parameters:
      - $ref: "#/components/parameters/indexId"
      - $ref: "#/components/parameters/siteName"
      - $ref: "#/components/parameters/docId"
      responses:
        '200':
          description: OK
        '500':
          $ref: "#/components/responses/UnknownError"
        '503':
          $ref: "#/components/responses/SaerchServerError"
  /update:
    post:
      tags:
      - update
      summary: Perform an update for a single document
      operationId: update
      parameters:
      - $ref: "#/components/parameters/indexId"
      - $ref: "#/components/parameters/siteName"
      - $ref: "#/components/parameters/docId"
      - in: query
        name: strip_root
        required: true
        schema:
          type: boolean
        description: Remove the root node from field names
      requestBody:
        content:
          application/xml:
            schema:
              type: string
              format: binary
      responses:
        '200':
          description: OK
        '500':
          $ref: "#/components/responses/UnknownError"
        '503':
          $ref: "#/components/responses/SaerchServerError"
  /update-content:
    post:
      tags:
      - update
      summary: Perform an update for a single binary file
      operationId: updateContent
      requestBody:
        content:
          multipart/form-data:
            schema:
              type: object
              required:
              - site
              - id
              - content
              properties:
                index_id:
                  type: string
                  description: The index id
                site:
                  type: string
                  description: The name of the site
                id:
                  type: string
                  description: The id of the document to update
                content:
                  type: string
                  format: binary
                  description: The content of the XML document to update
                parse_content:
                  type: boolean
                  description: Indicates if the document should be parsed instead of sending it complete to the search provider. The default value is true
                '*':
                  description: Any additional parameter will be indexed as part of the XML document
            encoding:
              content:
                contentType: application/xml
      responses:
        '200':
          description: OK
        '500':
          $ref: "#/components/responses/UnknownError"
        '503':
          $ref: "#/components/responses/SaerchServerError"
  /commit:
    post:
      tags:
      - update
      summary: Perform a commit for all pending changes
      operationId: commit
      parameters:
      - $ref: "#/components/parameters/indexId"
      responses:
        '200':
          description: OK
        '500':
          $ref: "#/components/responses/UnknownError"
        '503':
          $ref: "#/components/responses/SaerchServerError"

components:
  parameters:
    indexId:
      in: query
      name: index_id
      schema:
        type: string
      description: The index id
    siteName:
      in: query
      name: site
      schema:
        type: string
      required: true
      description: The name of the site
    docId:
      in: query
      name: id
      required: true
      schema:
        type: string
      description: The id of the document to update
  responses:
    UnknownError:
      description: Unknown Error
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/Error"
    SaerchServerError:
      description: Search Service Unavailable
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/Error"
  schemas:
    Error:
      type: object
      properties:
        message:
          type: string
          description: Error message
    FacetValue:
      type: object
      properties:
        value:
          type: string
          description: Value for the facet
        count:
          type: integer
          format: int64
          description: Count for the value
    Facet:
      type: object
      properties:
        id:
          type: string
          description: Id of the facet
        values:
          type: array
          description: Values for the facet
          items:
            $ref: "#/components/schemas/FacetValue"
    HighlightField:
      type: object
      properties:
        name:
          type: string
          description: Name of the field
        fragments:
          type: array
          description: List of fragments
          items:
            type: string
    Highlight:
      type: object
      properties:
        id:
          type: string
          description: id of the document
        fields:
          type: array
          description: List of fields
          items:
            $ref: "#/components/schemas/HighlightField"
    Suggestion:
      type: object
      properties:
        name:
          type: string
          description: Name of the suggester
        suggestions:
          type: array
          description: List of suggested values
          items:
            type: string
    FieldSort:
      type: object
      properties:
        name:
          type: string
          description: Name of the field
        order:
          type: string
          enum: [ASC, DESC]
    FacetRequest:
      type: object
      properties:
        fields:
          type: array
          items:
            type: string
    SortRequest:
      type: object
      properties:
        fields:
          type: array
          items:
            $ref: "#/components/schemas/FieldSort"
    SuggestRequest:
      type: object
      properties:
        name:
          type: string
          description: Name of the suggester to use
        field:
          type: string
          description: Name of the field used to generate suggestions
        query:
          type: string
          description: Query used to generate suggestions
        max:
          type: integer
          format: int32
          description: Maximum number of suggestions to generate
    HighlightRequest:
      type: object
      properties:
        query:
          type: string
          description: Query to use for highlighting
        maxFragments:
          type: integer
          format: int32
          description: Maximum number of fragment to generate for each field
        fragmentSize:
          type: integer
          format: int32
          description: Maximum size for each fragment
        prefix:
          type: string
          description: Opening tag used for the matched text
        postfix:
          type: string
          description: Closing tag used for the matched text
        fields:
          type: array
          items:
            type: string
          minItems: 1
          uniqueItems: true
          description: Fields to include during highlighting
    Point:
      type: object
      required:
      - latitude
      - longitude
      properties:
        latitude:
          type: integer
          format: int64
          description: Latitude of the location
        longitude:
          type: integer
          format: int64
          description: Longitude of the location
    DistanceFilter:
      type: object
      required:
      - field
      - point
      - distance
      properties:
        field:
          type: string
          description: Name of the field to filter
        point:
          $ref: "#/components/schemas/Point"
        distance:
          type: number
          format: double
          description: Distance from the location
        units:
          type: string
          description: Units used for the distance
        square:
          type: boolean
          description: Indicates if the filter should use a square instead of a circle
    RegionFilter:
      type: object
      required:
      - field
      - bottomLeft
      - topRight
      properties:
        field:
          type: string
          description: Name of the field to filter
        bottomLeft:
          $ref: "#/components/schemas/Point"
        topRight:
          $ref: "#/components/schemas/Point"
    LocationRequest:
      type: object
      properties:
        distances:
          type: array
          items:
            $ref: "#/components/schemas/DistanceFilter"
        regions:
          type: array
          items:
            $ref: "#/components/schemas/RegionFilter"
    SearchRequest:
      type: object
      required:
      - indexId
      - mainQuery
      properties:
        indexId:
          type: string
          description: The id of the index where the search will be performed
        mainQuery:
          type: string
          description: The main query for the search
        filterQueries:
          type: array
          uniqueItems: true
          description: The list of queries to filter results without affecting the score of the main query
          items:
            type: string
        disableAdditionalQueries:
          type: boolean
          description: Indicates if the search service should skip its internal filters
        fields:
          type: array
          description: List of names of the fields to return for the matched documents
          items:
            type: string
        offset:
          type: integer
          format: int32
          description: Position of the first document to return
        limit:
          type: integer
          format: int32
          description: Number of documents to return
        sort:
          $ref: "#/components/schemas/SortRequest"
        facets:
          $ref: "#/components/schemas/FacetRequest"
        highlights:
          $ref: "#/components/schemas/HighlightRequest"
        suggestions:
          $ref: "#/components/schemas/SuggestRequest"
        locations:
          $ref: "#/components/schemas/LocationRequest"
    SearchResponse:
      type: object
      properties:
        total:
          type: integer
          format: int64
          description: Total number of documents matched
        offset:
          type: integer
          format: int64
          description: Position of the first document returned
        limit:
          type: integer
          format: int64
          description: Number of documents returned
        items:
          type: array
          description: List of the returned documents
          items:
            type: object
            properties:
              id:
                type: string
                description: Id of the document
              fields:
                type: object
                description: Fields of the document
        facets:
          type: array
          items:
            $ref: "#/components/schemas/Facet"
        highlights:
          type: array
          items:
            $ref: "#/components/schemas/Highlight"
        suggestions:
          type: array
          items:
            $ref: "#/components/schemas/Suggestion"
security: []
